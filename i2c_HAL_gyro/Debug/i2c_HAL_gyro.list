
i2c_HAL_gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002594  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002720  08002720  00012720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002760  08002760  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002760  08002760  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002760  08002760  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002764  08002764  00012764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002774  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002774  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000896b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001847  00000000  00000000  000289ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0002a238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f4  00000000  00000000  0002ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb28  00000000  00000000  0002b254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b2b2  00000000  00000000  00049d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b92c3  00000000  00000000  0005502e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002464  00000000  00000000  0010e2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00110758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002708 	.word	0x08002708

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002708 	.word	0x08002708

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 f9aa 	bl	800052a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f817 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8a7 	bl	800032c <MX_GPIO_Init>
  MX_I2C1_Init();
 80001de:	f000 f865 	bl	80002ac <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  	  uint8_t whoAmIData;
  	 	  uint8_t whoAmIRegister = 0x75;  // WHO_AM_I register address for MPU-6050
 80001e2:	2375      	movs	r3, #117	; 0x75
 80001e4:	71fb      	strb	r3, [r7, #7]

  	 	  HAL_I2C_Mem_Read(&hi2c1,0x68 << 1, whoAmIRegister, 1, &whoAmIData, 1, HAL_MAX_DELAY);
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	b29a      	uxth	r2, r3
 80001ea:	f04f 33ff 	mov.w	r3, #4294967295
 80001ee:	9302      	str	r3, [sp, #8]
 80001f0:	2301      	movs	r3, #1
 80001f2:	9301      	str	r3, [sp, #4]
 80001f4:	1dbb      	adds	r3, r7, #6
 80001f6:	9300      	str	r3, [sp, #0]
 80001f8:	2301      	movs	r3, #1
 80001fa:	21d0      	movs	r1, #208	; 0xd0
 80001fc:	4801      	ldr	r0, [pc, #4]	; (8000204 <main+0x38>)
 80001fe:	f000 fcf5 	bl	8000bec <HAL_I2C_Mem_Read>
//  	 	  HAL_Delay(1000);
  while (1)
 8000202:	e7fe      	b.n	8000202 <main+0x36>
 8000204:	20000028 	.word	0x20000028

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b096      	sub	sp, #88	; 0x58
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0314 	add.w	r3, r7, #20
 8000212:	2244      	movs	r2, #68	; 0x44
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fa4a 	bl	80026b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800022a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800022e:	f001 f901 	bl	8001434 <HAL_PWREx_ControlVoltageScaling>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000238:	f000 f890 	bl	800035c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800023c:	2310      	movs	r3, #16
 800023e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000240:	2301      	movs	r3, #1
 8000242:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000248:	2360      	movs	r3, #96	; 0x60
 800024a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024c:	2302      	movs	r3, #2
 800024e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000250:	2301      	movs	r3, #1
 8000252:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000254:	2301      	movs	r3, #1
 8000256:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000258:	2310      	movs	r3, #16
 800025a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800025c:	2307      	movs	r3, #7
 800025e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000260:	2302      	movs	r3, #2
 8000262:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000264:	2302      	movs	r3, #2
 8000266:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	4618      	mov	r0, r3
 800026e:	f001 f937 	bl	80014e0 <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000278:	f000 f870 	bl	800035c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000280:	2303      	movs	r3, #3
 8000282:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000290:	463b      	mov	r3, r7
 8000292:	2100      	movs	r1, #0
 8000294:	4618      	mov	r0, r3
 8000296:	f001 fd37 	bl	8001d08 <HAL_RCC_ClockConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002a0:	f000 f85c 	bl	800035c <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3758      	adds	r7, #88	; 0x58
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <MX_I2C1_Init+0x74>)
 80002b2:	4a1c      	ldr	r2, [pc, #112]	; (8000324 <MX_I2C1_Init+0x78>)
 80002b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <MX_I2C1_Init+0x74>)
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <MX_I2C1_Init+0x7c>)
 80002ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <MX_I2C1_Init+0x74>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <MX_I2C1_Init+0x74>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c8:	4b15      	ldr	r3, [pc, #84]	; (8000320 <MX_I2C1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_I2C1_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_I2C1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_I2C1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002e6:	480e      	ldr	r0, [pc, #56]	; (8000320 <MX_I2C1_Init+0x74>)
 80002e8:	f000 fbe4 	bl	8000ab4 <HAL_I2C_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002f2:	f000 f833 	bl	800035c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002f6:	2100      	movs	r1, #0
 80002f8:	4809      	ldr	r0, [pc, #36]	; (8000320 <MX_I2C1_Init+0x74>)
 80002fa:	f000 fff5 	bl	80012e8 <HAL_I2CEx_ConfigAnalogFilter>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000304:	f000 f82a 	bl	800035c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000308:	2100      	movs	r1, #0
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_I2C1_Init+0x74>)
 800030c:	f001 f837 	bl	800137e <HAL_I2CEx_ConfigDigitalFilter>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000316:	f000 f821 	bl	800035c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028
 8000324:	40005400 	.word	0x40005400
 8000328:	00303d5b 	.word	0x00303d5b

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_GPIO_Init+0x2c>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000336:	4a08      	ldr	r2, [pc, #32]	; (8000358 <MX_GPIO_Init+0x2c>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_GPIO_Init+0x2c>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000

0800035c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000360:	b672      	cpsid	i
}
 8000362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000364:	e7fe      	b.n	8000364 <Error_Handler+0x8>
	...

08000368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <HAL_MspInit+0x44>)
 8000370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <HAL_MspInit+0x44>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6613      	str	r3, [r2, #96]	; 0x60
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <HAL_MspInit+0x44>)
 800037c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <HAL_MspInit+0x44>)
 8000388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800038a:	4a08      	ldr	r2, [pc, #32]	; (80003ac <HAL_MspInit+0x44>)
 800038c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000390:	6593      	str	r3, [r2, #88]	; 0x58
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <HAL_MspInit+0x44>)
 8000394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000

080003b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b09e      	sub	sp, #120	; 0x78
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	2254      	movs	r2, #84	; 0x54
 80003ce:	2100      	movs	r1, #0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 f96d 	bl	80026b0 <memset>
  if(hi2c->Instance==I2C1)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <HAL_I2C_MspInit+0xa8>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d137      	bne.n	8000450 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003e0:	2340      	movs	r3, #64	; 0x40
 80003e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 fe77 	bl	80020e0 <HAL_RCCEx_PeriphCLKConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80003f8:	f7ff ffb0 	bl	800035c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <HAL_I2C_MspInit+0xac>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000400:	4a16      	ldr	r2, [pc, #88]	; (800045c <HAL_I2C_MspInit+0xac>)
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <HAL_I2C_MspInit+0xac>)
 800040a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040c:	f003 0301 	and.w	r3, r3, #1
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000414:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000418:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800041a:	2312      	movs	r3, #18
 800041c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000422:	2303      	movs	r3, #3
 8000424:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000426:	2304      	movs	r3, #4
 8000428:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800042e:	4619      	mov	r1, r3
 8000430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000434:	f000 f9d4 	bl	80007e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <HAL_I2C_MspInit+0xac>)
 800043a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043c:	4a07      	ldr	r2, [pc, #28]	; (800045c <HAL_I2C_MspInit+0xac>)
 800043e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000442:	6593      	str	r3, [r2, #88]	; 0x58
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <HAL_I2C_MspInit+0xac>)
 8000446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000450:	bf00      	nop
 8000452:	3778      	adds	r7, #120	; 0x78
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40005400 	.word	0x40005400
 800045c:	40021000 	.word	0x40021000

08000460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000464:	e7fe      	b.n	8000464 <NMI_Handler+0x4>

08000466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <MemManage_Handler+0x4>

08000472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <UsageFault_Handler+0x4>

0800047e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ac:	f000 f892 	bl	80005d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <SystemInit+0x20>)
 80004ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004be:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <SystemInit+0x20>)
 80004c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000510 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004dc:	f7ff ffea 	bl	80004b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e2:	490d      	ldr	r1, [pc, #52]	; (8000518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <LoopForever+0xe>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f8:	4c0a      	ldr	r4, [pc, #40]	; (8000524 <LoopForever+0x16>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000506:	f002 f8db 	bl	80026c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800050a:	f7ff fe5f 	bl	80001cc <main>

0800050e <LoopForever>:

LoopForever:
    b LoopForever
 800050e:	e7fe      	b.n	800050e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000510:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800051c:	08002768 	.word	0x08002768
  ldr r2, =_sbss
 8000520:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000524:	20000080 	.word	0x20000080

08000528 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC1_IRQHandler>

0800052a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000530:	2300      	movs	r3, #0
 8000532:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000534:	2003      	movs	r0, #3
 8000536:	f000 f91f 	bl	8000778 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800053a:	200f      	movs	r0, #15
 800053c:	f000 f80e 	bl	800055c <HAL_InitTick>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d002      	beq.n	800054c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	71fb      	strb	r3, [r7, #7]
 800054a:	e001      	b.n	8000550 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800054c:	f7ff ff0c 	bl	8000368 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000550:	79fb      	ldrb	r3, [r7, #7]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <HAL_InitTick+0x6c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d023      	beq.n	80005b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <HAL_InitTick+0x70>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <HAL_InitTick+0x6c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000582:	fbb2 f3f3 	udiv	r3, r2, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f91d 	bl	80007c6 <HAL_SYSTICK_Config>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d10f      	bne.n	80005b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d809      	bhi.n	80005ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000598:	2200      	movs	r2, #0
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	f04f 30ff 	mov.w	r0, #4294967295
 80005a0:	f000 f8f5 	bl	800078e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_InitTick+0x74>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	e007      	b.n	80005bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005ac:	2301      	movs	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	e004      	b.n	80005bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
 80005b4:	73fb      	strb	r3, [r7, #15]
 80005b6:	e001      	b.n	80005bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005b8:	2301      	movs	r3, #1
 80005ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000008 	.word	0x20000008
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000004 	.word	0x20000004

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x20>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_IncTick+0x24>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000008 	.word	0x20000008
 80005f8:	2000007c 	.word	0x2000007c

080005fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <HAL_GetTick+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2000007c 	.word	0x2000007c

08000614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_GetPriorityGrouping+0x18>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	f003 0307 	and.w	r3, r3, #7
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db0a      	blt.n	80006a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <__NVIC_SetPriority+0x4c>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a0:	e00a      	b.n	80006b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4908      	ldr	r1, [pc, #32]	; (80006c8 <__NVIC_SetPriority+0x50>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	3b04      	subs	r3, #4
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	761a      	strb	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	f1c3 0307 	rsb	r3, r3, #7
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	bf28      	it	cs
 80006ea:	2304      	movcs	r3, #4
 80006ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3304      	adds	r3, #4
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d902      	bls.n	80006fc <NVIC_EncodePriority+0x30>
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3b03      	subs	r3, #3
 80006fa:	e000      	b.n	80006fe <NVIC_EncodePriority+0x32>
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	f04f 32ff 	mov.w	r2, #4294967295
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43da      	mvns	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	401a      	ands	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000714:	f04f 31ff 	mov.w	r1, #4294967295
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	43d9      	mvns	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4313      	orrs	r3, r2
         );
}
 8000726:	4618      	mov	r0, r3
 8000728:	3724      	adds	r7, #36	; 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000744:	d301      	bcc.n	800074a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000746:	2301      	movs	r3, #1
 8000748:	e00f      	b.n	800076a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <SysTick_Config+0x40>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000752:	210f      	movs	r1, #15
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f7ff ff8e 	bl	8000678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <SysTick_Config+0x40>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <SysTick_Config+0x40>)
 8000764:	2207      	movs	r2, #7
 8000766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	e000e010 	.word	0xe000e010

08000778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff ff47 	bl	8000614 <__NVIC_SetPriorityGrouping>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b086      	sub	sp, #24
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007a0:	f7ff ff5c 	bl	800065c <__NVIC_GetPriorityGrouping>
 80007a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	6978      	ldr	r0, [r7, #20]
 80007ac:	f7ff ff8e 	bl	80006cc <NVIC_EncodePriority>
 80007b0:	4602      	mov	r2, r0
 80007b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff5d 	bl	8000678 <__NVIC_SetPriority>
}
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ffb0 	bl	8000734 <SysTick_Config>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b087      	sub	sp, #28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ee:	e148      	b.n	8000a82 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	2101      	movs	r1, #1
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	fa01 f303 	lsl.w	r3, r1, r3
 80007fc:	4013      	ands	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	f000 813a 	beq.w	8000a7c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	2b01      	cmp	r3, #1
 8000812:	d005      	beq.n	8000820 <HAL_GPIO_Init+0x40>
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	f003 0303 	and.w	r3, r3, #3
 800081c:	2b02      	cmp	r3, #2
 800081e:	d130      	bne.n	8000882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	2203      	movs	r2, #3
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	43db      	mvns	r3, r3
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	4013      	ands	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	68da      	ldr	r2, [r3, #12]
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	4313      	orrs	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000856:	2201      	movs	r2, #1
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	4013      	ands	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	091b      	lsrs	r3, r3, #4
 800086c:	f003 0201 	and.w	r2, r3, #1
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	4313      	orrs	r3, r2
 800087a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f003 0303 	and.w	r3, r3, #3
 800088a:	2b03      	cmp	r3, #3
 800088c:	d017      	beq.n	80008be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	2203      	movs	r2, #3
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4013      	ands	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	689a      	ldr	r2, [r3, #8]
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0303 	and.w	r3, r3, #3
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d123      	bne.n	8000912 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	08da      	lsrs	r2, r3, #3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3208      	adds	r2, #8
 80008d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	220f      	movs	r2, #15
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	691a      	ldr	r2, [r3, #16]
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	f003 0307 	and.w	r3, r3, #7
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	08da      	lsrs	r2, r3, #3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3208      	adds	r2, #8
 800090c:	6939      	ldr	r1, [r7, #16]
 800090e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	2203      	movs	r2, #3
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f003 0203 	and.w	r2, r3, #3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4313      	orrs	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800094e:	2b00      	cmp	r3, #0
 8000950:	f000 8094 	beq.w	8000a7c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000954:	4b52      	ldr	r3, [pc, #328]	; (8000aa0 <HAL_GPIO_Init+0x2c0>)
 8000956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000958:	4a51      	ldr	r2, [pc, #324]	; (8000aa0 <HAL_GPIO_Init+0x2c0>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6613      	str	r3, [r2, #96]	; 0x60
 8000960:	4b4f      	ldr	r3, [pc, #316]	; (8000aa0 <HAL_GPIO_Init+0x2c0>)
 8000962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800096c:	4a4d      	ldr	r2, [pc, #308]	; (8000aa4 <HAL_GPIO_Init+0x2c4>)
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	089b      	lsrs	r3, r3, #2
 8000972:	3302      	adds	r3, #2
 8000974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	f003 0303 	and.w	r3, r3, #3
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	220f      	movs	r2, #15
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000996:	d00d      	beq.n	80009b4 <HAL_GPIO_Init+0x1d4>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a43      	ldr	r2, [pc, #268]	; (8000aa8 <HAL_GPIO_Init+0x2c8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d007      	beq.n	80009b0 <HAL_GPIO_Init+0x1d0>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a42      	ldr	r2, [pc, #264]	; (8000aac <HAL_GPIO_Init+0x2cc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d101      	bne.n	80009ac <HAL_GPIO_Init+0x1cc>
 80009a8:	2302      	movs	r3, #2
 80009aa:	e004      	b.n	80009b6 <HAL_GPIO_Init+0x1d6>
 80009ac:	2307      	movs	r3, #7
 80009ae:	e002      	b.n	80009b6 <HAL_GPIO_Init+0x1d6>
 80009b0:	2301      	movs	r3, #1
 80009b2:	e000      	b.n	80009b6 <HAL_GPIO_Init+0x1d6>
 80009b4:	2300      	movs	r3, #0
 80009b6:	697a      	ldr	r2, [r7, #20]
 80009b8:	f002 0203 	and.w	r2, r2, #3
 80009bc:	0092      	lsls	r2, r2, #2
 80009be:	4093      	lsls	r3, r2
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009c6:	4937      	ldr	r1, [pc, #220]	; (8000aa4 <HAL_GPIO_Init+0x2c4>)
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009d4:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <HAL_GPIO_Init+0x2d0>)
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d003      	beq.n	80009f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009f8:	4a2d      	ldr	r2, [pc, #180]	; (8000ab0 <HAL_GPIO_Init+0x2d0>)
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009fe:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <HAL_GPIO_Init+0x2d0>)
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <HAL_GPIO_Init+0x2d0>)
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <HAL_GPIO_Init+0x2d0>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a4c:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <HAL_GPIO_Init+0x2d0>)
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_GPIO_Init+0x2d0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_GPIO_Init+0x2d0>)
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	fa22 f303 	lsr.w	r3, r2, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f47f aeaf 	bne.w	80007f0 <HAL_GPIO_Init+0x10>
  }
}
 8000a92:	bf00      	nop
 8000a94:	bf00      	nop
 8000a96:	371c      	adds	r7, #28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010000 	.word	0x40010000
 8000aa8:	48000400 	.word	0x48000400
 8000aac:	48000800 	.word	0x48000800
 8000ab0:	40010400 	.word	0x40010400

08000ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e08d      	b.n	8000be2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d106      	bne.n	8000ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fc68 	bl	80003b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2224      	movs	r2, #36	; 0x24
 8000ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 0201 	bic.w	r2, r2, #1
 8000af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d107      	bne.n	8000b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689a      	ldr	r2, [r3, #8]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	e006      	b.n	8000b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d108      	bne.n	8000b56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	e007      	b.n	8000b66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	6812      	ldr	r2, [r2, #0]
 8000b70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	691a      	ldr	r2, [r3, #16]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69d9      	ldr	r1, [r3, #28]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a1a      	ldr	r2, [r3, #32]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f042 0201 	orr.w	r2, r2, #1
 8000bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2220      	movs	r2, #32
 8000bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	817b      	strh	r3, [r7, #10]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	813b      	strh	r3, [r7, #8]
 8000c02:	4613      	mov	r3, r2
 8000c04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b20      	cmp	r3, #32
 8000c10:	f040 80fd 	bne.w	8000e0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8000c14:	6a3b      	ldr	r3, [r7, #32]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <HAL_I2C_Mem_Read+0x34>
 8000c1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d105      	bne.n	8000c2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e0f1      	b.n	8000e10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d101      	bne.n	8000c3a <HAL_I2C_Mem_Read+0x4e>
 8000c36:	2302      	movs	r3, #2
 8000c38:	e0ea      	b.n	8000e10 <HAL_I2C_Mem_Read+0x224>
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c42:	f7ff fcdb 	bl	80005fc <HAL_GetTick>
 8000c46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	2319      	movs	r3, #25
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f000 f95b 	bl	8000f10 <I2C_WaitOnFlagUntilTimeout>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e0d5      	b.n	8000e10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2222      	movs	r2, #34	; 0x22
 8000c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2240      	movs	r2, #64	; 0x40
 8000c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2200      	movs	r2, #0
 8000c78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6a3a      	ldr	r2, [r7, #32]
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000c8c:	88f8      	ldrh	r0, [r7, #6]
 8000c8e:	893a      	ldrh	r2, [r7, #8]
 8000c90:	8979      	ldrh	r1, [r7, #10]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	9301      	str	r3, [sp, #4]
 8000c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f000 f8bf 	bl	8000e20 <I2C_RequestMemoryRead>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d005      	beq.n	8000cb4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e0ad      	b.n	8000e10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	2bff      	cmp	r3, #255	; 0xff
 8000cbc:	d90e      	bls.n	8000cdc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	22ff      	movs	r2, #255	; 0xff
 8000cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	8979      	ldrh	r1, [r7, #10]
 8000ccc:	4b52      	ldr	r3, [pc, #328]	; (8000e18 <HAL_I2C_Mem_Read+0x22c>)
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f000 fad5 	bl	8001284 <I2C_TransferConfig>
 8000cda:	e00f      	b.n	8000cfc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	8979      	ldrh	r1, [r7, #10]
 8000cee:	4b4a      	ldr	r3, [pc, #296]	; (8000e18 <HAL_I2C_Mem_Read+0x22c>)
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f000 fac4 	bl	8001284 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	2200      	movs	r2, #0
 8000d04:	2104      	movs	r1, #4
 8000d06:	68f8      	ldr	r0, [r7, #12]
 8000d08:	f000 f902 	bl	8000f10 <I2C_WaitOnFlagUntilTimeout>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e07c      	b.n	8000e10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d32:	3b01      	subs	r3, #1
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	3b01      	subs	r3, #1
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d034      	beq.n	8000dbc <HAL_I2C_Mem_Read+0x1d0>
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d130      	bne.n	8000dbc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d60:	2200      	movs	r2, #0
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f000 f8d3 	bl	8000f10 <I2C_WaitOnFlagUntilTimeout>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e04d      	b.n	8000e10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2bff      	cmp	r3, #255	; 0xff
 8000d7c:	d90e      	bls.n	8000d9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	22ff      	movs	r2, #255	; 0xff
 8000d82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	8979      	ldrh	r1, [r7, #10]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f000 fa75 	bl	8001284 <I2C_TransferConfig>
 8000d9a:	e00f      	b.n	8000dbc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	8979      	ldrh	r1, [r7, #10]
 8000dae:	2300      	movs	r3, #0
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f000 fa64 	bl	8001284 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d19a      	bne.n	8000cfc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f000 f936 	bl	800103c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e01a      	b.n	8000e10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2220      	movs	r2, #32
 8000de0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6859      	ldr	r1, [r3, #4]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_I2C_Mem_Read+0x230>)
 8000dee:	400b      	ands	r3, r1
 8000df0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2220      	movs	r2, #32
 8000df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8000e0e:	2302      	movs	r3, #2
  }
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	80002400 	.word	0x80002400
 8000e1c:	fe00e800 	.word	0xfe00e800

08000e20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	4608      	mov	r0, r1
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4603      	mov	r3, r0
 8000e30:	817b      	strh	r3, [r7, #10]
 8000e32:	460b      	mov	r3, r1
 8000e34:	813b      	strh	r3, [r7, #8]
 8000e36:	4613      	mov	r3, r2
 8000e38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	8979      	ldrh	r1, [r7, #10]
 8000e40:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <I2C_RequestMemoryRead+0xa4>)
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2300      	movs	r3, #0
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f000 fa1c 	bl	8001284 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	69b9      	ldr	r1, [r7, #24]
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f000 f8ac 	bl	8000fae <I2C_WaitOnTXISFlagUntilTimeout>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e02c      	b.n	8000eba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d105      	bne.n	8000e72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000e66:	893b      	ldrh	r3, [r7, #8]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
 8000e70:	e015      	b.n	8000e9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000e72:	893b      	ldrh	r3, [r7, #8]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e80:	69fa      	ldr	r2, [r7, #28]
 8000e82:	69b9      	ldr	r1, [r7, #24]
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f000 f892 	bl	8000fae <I2C_WaitOnTXISFlagUntilTimeout>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e012      	b.n	8000eba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000e94:	893b      	ldrh	r3, [r7, #8]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2140      	movs	r1, #64	; 0x40
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f000 f831 	bl	8000f10 <I2C_WaitOnFlagUntilTimeout>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e000      	b.n	8000eba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	80002000 	.word	0x80002000

08000ec8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d103      	bne.n	8000ee6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d007      	beq.n	8000f04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	699a      	ldr	r2, [r3, #24]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0201 	orr.w	r2, r2, #1
 8000f02:	619a      	str	r2, [r3, #24]
  }
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f20:	e031      	b.n	8000f86 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d02d      	beq.n	8000f86 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f2a:	f7ff fb67 	bl	80005fc <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d302      	bcc.n	8000f40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d122      	bne.n	8000f86 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	699a      	ldr	r2, [r3, #24]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	bf0c      	ite	eq
 8000f50:	2301      	moveq	r3, #1
 8000f52:	2300      	movne	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d113      	bne.n	8000f86 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f043 0220 	orr.w	r2, r3, #32
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	699a      	ldr	r2, [r3, #24]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	bf0c      	ite	eq
 8000f96:	2301      	moveq	r3, #1
 8000f98:	2300      	movne	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d0be      	beq.n	8000f22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000fba:	e033      	b.n	8001024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f000 f87f 	bl	80010c4 <I2C_IsErrorOccurred>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e031      	b.n	8001034 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd6:	d025      	beq.n	8001024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fd8:	f7ff fb10 	bl	80005fc <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d302      	bcc.n	8000fee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d11a      	bne.n	8001024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d013      	beq.n	8001024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001000:	f043 0220 	orr.w	r2, r3, #32
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2220      	movs	r2, #32
 800100c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e007      	b.n	8001034 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b02      	cmp	r3, #2
 8001030:	d1c4      	bne.n	8000fbc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001048:	e02f      	b.n	80010aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 f838 	bl	80010c4 <I2C_IsErrorOccurred>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e02d      	b.n	80010ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800105e:	f7ff facd 	bl	80005fc <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	429a      	cmp	r2, r3
 800106c:	d302      	bcc.n	8001074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d11a      	bne.n	80010aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 0320 	and.w	r3, r3, #32
 800107e:	2b20      	cmp	r3, #32
 8001080:	d013      	beq.n	80010aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f043 0220 	orr.w	r2, r3, #32
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2220      	movs	r2, #32
 8001092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e007      	b.n	80010ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0320 	and.w	r3, r3, #32
 80010b4:	2b20      	cmp	r3, #32
 80010b6:	d1c8      	bne.n	800104a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d068      	beq.n	80011c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2210      	movs	r2, #16
 80010f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80010f8:	e049      	b.n	800118e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d045      	beq.n	800118e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001102:	f7ff fa7b 	bl	80005fc <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	429a      	cmp	r2, r3
 8001110:	d302      	bcc.n	8001118 <I2C_IsErrorOccurred+0x54>
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d13a      	bne.n	800118e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001122:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800112a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800113a:	d121      	bne.n	8001180 <I2C_IsErrorOccurred+0xbc>
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001142:	d01d      	beq.n	8001180 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001144:	7cfb      	ldrb	r3, [r7, #19]
 8001146:	2b20      	cmp	r3, #32
 8001148:	d01a      	beq.n	8001180 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001158:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800115a:	f7ff fa4f 	bl	80005fc <HAL_GetTick>
 800115e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001160:	e00e      	b.n	8001180 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001162:	f7ff fa4b 	bl	80005fc <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b19      	cmp	r3, #25
 800116e:	d907      	bls.n	8001180 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	f043 0320 	orr.w	r3, r3, #32
 8001176:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800117e:	e006      	b.n	800118e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	2b20      	cmp	r3, #32
 800118c:	d1e9      	bne.n	8001162 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	2b20      	cmp	r3, #32
 800119a:	d003      	beq.n	80011a4 <I2C_IsErrorOccurred+0xe0>
 800119c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0aa      	beq.n	80010fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80011a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d103      	bne.n	80011b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2220      	movs	r2, #32
 80011b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00b      	beq.n	80011ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001206:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00b      	beq.n	8001230 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001228:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001234:	2b00      	cmp	r3, #0
 8001236:	d01c      	beq.n	8001272 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff fe45 	bl	8000ec8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6859      	ldr	r1, [r3, #4]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <I2C_IsErrorOccurred+0x1bc>)
 800124a:	400b      	ands	r3, r1
 800124c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	431a      	orrs	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2220      	movs	r2, #32
 800125e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001276:	4618      	mov	r0, r3
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	fe00e800 	.word	0xfe00e800

08001284 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001284:	b480      	push	{r7}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	817b      	strh	r3, [r7, #10]
 8001292:	4613      	mov	r3, r2
 8001294:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001296:	897b      	ldrh	r3, [r7, #10]
 8001298:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800129c:	7a7b      	ldrb	r3, [r7, #9]
 800129e:	041b      	lsls	r3, r3, #16
 80012a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80012a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	0d5b      	lsrs	r3, r3, #21
 80012be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <I2C_TransferConfig+0x60>)
 80012c4:	430b      	orrs	r3, r1
 80012c6:	43db      	mvns	r3, r3
 80012c8:	ea02 0103 	and.w	r1, r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	03ff63ff 	.word	0x03ff63ff

080012e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b20      	cmp	r3, #32
 80012fc:	d138      	bne.n	8001370 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001308:	2302      	movs	r3, #2
 800130a:	e032      	b.n	8001372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2224      	movs	r2, #36	; 0x24
 8001318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800133a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6819      	ldr	r1, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0201 	orr.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2220      	movs	r2, #32
 8001360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	e000      	b.n	8001372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001370:	2302      	movs	r3, #2
  }
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b20      	cmp	r3, #32
 8001392:	d139      	bne.n	8001408 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800139e:	2302      	movs	r3, #2
 80013a0:	e033      	b.n	800140a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2224      	movs	r2, #36	; 0x24
 80013ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0201 	orr.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2220      	movs	r2, #32
 80013f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	e000      	b.n	800140a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001408:	2302      	movs	r3, #2
  }
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <HAL_PWREx_GetVoltageRange+0x18>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40007000 	.word	0x40007000

08001434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001442:	d130      	bne.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800144c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001450:	d038      	beq.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800145a:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001460:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2232      	movs	r2, #50	; 0x32
 8001468:	fb02 f303 	mul.w	r3, r2, r3
 800146c:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9b      	lsrs	r3, r3, #18
 8001474:	3301      	adds	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001478:	e002      	b.n	8001480 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3b01      	subs	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148c:	d102      	bne.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x60>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f2      	bne.n	800147a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a0:	d110      	bne.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e00f      	b.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b2:	d007      	beq.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014bc:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40007000 	.word	0x40007000
 80014d8:	20000000 	.word	0x20000000
 80014dc:	431bde83 	.word	0x431bde83

080014e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f000 bc02 	b.w	8001cf8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f4:	4b96      	ldr	r3, [pc, #600]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014fe:	4b94      	ldr	r3, [pc, #592]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80e4 	beq.w	80016de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <HAL_RCC_OscConfig+0x4c>
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2b0c      	cmp	r3, #12
 8001520:	f040 808b 	bne.w	800163a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2b01      	cmp	r3, #1
 8001528:	f040 8087 	bne.w	800163a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800152c:	4b88      	ldr	r3, [pc, #544]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <HAL_RCC_OscConfig+0x64>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e3d9      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1a      	ldr	r2, [r3, #32]
 8001548:	4b81      	ldr	r3, [pc, #516]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <HAL_RCC_OscConfig+0x7e>
 8001554:	4b7e      	ldr	r3, [pc, #504]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800155c:	e005      	b.n	800156a <HAL_RCC_OscConfig+0x8a>
 800155e:	4b7c      	ldr	r3, [pc, #496]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800156a:	4293      	cmp	r3, r2
 800156c:	d223      	bcs.n	80015b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fd54 	bl	8002020 <RCC_SetFlashLatencyFromMSIRange>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e3ba      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001582:	4b73      	ldr	r3, [pc, #460]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a72      	ldr	r2, [pc, #456]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b70      	ldr	r3, [pc, #448]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	496d      	ldr	r1, [pc, #436]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a0:	4b6b      	ldr	r3, [pc, #428]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	4968      	ldr	r1, [pc, #416]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
 80015b4:	e025      	b.n	8001602 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b6:	4b66      	ldr	r3, [pc, #408]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a65      	ldr	r2, [pc, #404]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b63      	ldr	r3, [pc, #396]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4960      	ldr	r1, [pc, #384]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d4:	4b5e      	ldr	r3, [pc, #376]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	495b      	ldr	r1, [pc, #364]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fd14 	bl	8002020 <RCC_SetFlashLatencyFromMSIRange>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e37a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001602:	f000 fc81 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 8001606:	4602      	mov	r2, r0
 8001608:	4b51      	ldr	r3, [pc, #324]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	4950      	ldr	r1, [pc, #320]	; (8001754 <HAL_RCC_OscConfig+0x274>)
 8001614:	5ccb      	ldrb	r3, [r1, r3]
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	4a4e      	ldr	r2, [pc, #312]	; (8001758 <HAL_RCC_OscConfig+0x278>)
 8001620:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001622:	4b4e      	ldr	r3, [pc, #312]	; (800175c <HAL_RCC_OscConfig+0x27c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff98 	bl	800055c <HAL_InitTick>
 800162c:	4603      	mov	r3, r0
 800162e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d052      	beq.n	80016dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	e35e      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d032      	beq.n	80016a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001642:	4b43      	ldr	r3, [pc, #268]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a42      	ldr	r2, [pc, #264]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800164e:	f7fe ffd5 	bl	80005fc <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001656:	f7fe ffd1 	bl	80005fc <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e347      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001674:	4b36      	ldr	r3, [pc, #216]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a35      	ldr	r2, [pc, #212]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b33      	ldr	r3, [pc, #204]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4930      	ldr	r1, [pc, #192]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	492b      	ldr	r1, [pc, #172]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
 80016a6:	e01a      	b.n	80016de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a28      	ldr	r2, [pc, #160]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016b4:	f7fe ffa2 	bl	80005fc <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016bc:	f7fe ff9e 	bl	80005fc <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e314      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x1dc>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d073      	beq.n	80017d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_OscConfig+0x21c>
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d10e      	bne.n	8001714 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d10b      	bne.n	8001714 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d063      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2f0>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d15f      	bne.n	80017d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e2f1      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d106      	bne.n	800172c <HAL_RCC_OscConfig+0x24c>
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e025      	b.n	8001778 <HAL_RCC_OscConfig+0x298>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001734:	d114      	bne.n	8001760 <HAL_RCC_OscConfig+0x280>
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800173c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a02      	ldr	r2, [pc, #8]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e013      	b.n	8001778 <HAL_RCC_OscConfig+0x298>
 8001750:	40021000 	.word	0x40021000
 8001754:	08002720 	.word	0x08002720
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004
 8001760:	4ba0      	ldr	r3, [pc, #640]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a9f      	ldr	r2, [pc, #636]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b9d      	ldr	r3, [pc, #628]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a9c      	ldr	r2, [pc, #624]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7fe ff3c 	bl	80005fc <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001788:	f7fe ff38 	bl	80005fc <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e2ae      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	4b92      	ldr	r3, [pc, #584]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x2a8>
 80017a6:	e014      	b.n	80017d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7fe ff28 	bl	80005fc <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b0:	f7fe ff24 	bl	80005fc <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e29a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2d0>
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d060      	beq.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_OscConfig+0x310>
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	d119      	bne.n	800181e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d116      	bne.n	800181e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f0:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_OscConfig+0x328>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e277      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b76      	ldr	r3, [pc, #472]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	061b      	lsls	r3, r3, #24
 8001816:	4973      	ldr	r1, [pc, #460]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800181c:	e040      	b.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d023      	beq.n	800186e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001826:	4b6f      	ldr	r3, [pc, #444]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6e      	ldr	r2, [pc, #440]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7fe fee3 	bl	80005fc <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183a:	f7fe fedf 	bl	80005fc <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e255      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800184c:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b62      	ldr	r3, [pc, #392]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	495f      	ldr	r1, [pc, #380]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e018      	b.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186e:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7fe febf 	bl	80005fc <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7fe febb 	bl	80005fc <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e231      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001894:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d03c      	beq.n	8001926 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d01c      	beq.n	80018ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b4:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ba:	4a4a      	ldr	r2, [pc, #296]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7fe fe9a 	bl	80005fc <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7fe fe96 	bl	80005fc <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e20c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018de:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0ef      	beq.n	80018cc <HAL_RCC_OscConfig+0x3ec>
 80018ec:	e01b      	b.n	8001926 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ee:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f4:	4a3b      	ldr	r2, [pc, #236]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fe:	f7fe fe7d 	bl	80005fc <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001906:	f7fe fe79 	bl	80005fc <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1ef      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001918:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ef      	bne.n	8001906 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80a6 	beq.w	8001a80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10d      	bne.n	8001960 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	4a26      	ldr	r2, [pc, #152]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	6593      	str	r3, [r2, #88]	; 0x58
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195c:	2301      	movs	r3, #1
 800195e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001960:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <HAL_RCC_OscConfig+0x508>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d118      	bne.n	800199e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <HAL_RCC_OscConfig+0x508>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_RCC_OscConfig+0x508>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001978:	f7fe fe40 	bl	80005fc <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001980:	f7fe fe3c 	bl	80005fc <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1b2      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_RCC_OscConfig+0x508>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d108      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4d8>
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b6:	e029      	b.n	8001a0c <HAL_RCC_OscConfig+0x52c>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d115      	bne.n	80019ec <HAL_RCC_OscConfig+0x50c>
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c6:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e0:	e014      	b.n	8001a0c <HAL_RCC_OscConfig+0x52c>
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40007000 	.word	0x40007000
 80019ec:	4b9a      	ldr	r3, [pc, #616]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 80019ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f2:	4a99      	ldr	r2, [pc, #612]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019fc:	4b96      	ldr	r3, [pc, #600]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a02:	4a95      	ldr	r2, [pc, #596]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d016      	beq.n	8001a42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7fe fdf2 	bl	80005fc <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7fe fdee 	bl	80005fc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e162      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a32:	4b89      	ldr	r3, [pc, #548]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ed      	beq.n	8001a1c <HAL_RCC_OscConfig+0x53c>
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a42:	f7fe fddb 	bl	80005fc <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7fe fdd7 	bl	80005fc <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e14b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a60:	4b7d      	ldr	r3, [pc, #500]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1ed      	bne.n	8001a4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a6e:	7ffb      	ldrb	r3, [r7, #31]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a74:	4b78      	ldr	r3, [pc, #480]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	4a77      	ldr	r2, [pc, #476]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d03c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01c      	beq.n	8001ace <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a94:	4b70      	ldr	r3, [pc, #448]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a9a:	4a6f      	ldr	r2, [pc, #444]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7fe fdaa 	bl	80005fc <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aac:	f7fe fda6 	bl	80005fc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e11c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001abe:	4b66      	ldr	r3, [pc, #408]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0ef      	beq.n	8001aac <HAL_RCC_OscConfig+0x5cc>
 8001acc:	e01b      	b.n	8001b06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ace:	4b62      	ldr	r3, [pc, #392]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001ad0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ad4:	4a60      	ldr	r2, [pc, #384]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7fe fd8d 	bl	80005fc <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae6:	f7fe fd89 	bl	80005fc <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0ff      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001af8:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1ef      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80f3 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	f040 80c9 	bne.w	8001cac <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b1a:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0203 	and.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d12c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d123      	bne.n	8001b88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d11b      	bne.n	8001b88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d113      	bne.n	8001b88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d109      	bne.n	8001b88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	085b      	lsrs	r3, r3, #1
 8001b80:	3b01      	subs	r3, #1
 8001b82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d06b      	beq.n	8001c60 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d062      	beq.n	8001c54 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b8e:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e0ac      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2d      	ldr	r2, [pc, #180]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001ba4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001baa:	f7fe fd27 	bl	80005fc <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7fe fd23 	bl	80005fc <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e099      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_RCC_OscConfig+0x77c>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001be0:	3a01      	subs	r2, #1
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	4311      	orrs	r1, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bea:	0212      	lsls	r2, r2, #8
 8001bec:	4311      	orrs	r1, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bf2:	0852      	lsrs	r2, r2, #1
 8001bf4:	3a01      	subs	r2, #1
 8001bf6:	0552      	lsls	r2, r2, #21
 8001bf8:	4311      	orrs	r1, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bfe:	0852      	lsrs	r2, r2, #1
 8001c00:	3a01      	subs	r2, #1
 8001c02:	0652      	lsls	r2, r2, #25
 8001c04:	4311      	orrs	r1, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c0a:	06d2      	lsls	r2, r2, #27
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	4912      	ldr	r1, [pc, #72]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0f      	ldr	r2, [pc, #60]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c20:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c2c:	f7fe fce6 	bl	80005fc <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c34:	f7fe fce2 	bl	80005fc <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e058      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <HAL_RCC_OscConfig+0x778>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c52:	e050      	b.n	8001cf6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e04f      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_RCC_OscConfig+0x820>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d144      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_OscConfig+0x820>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a23      	ldr	r2, [pc, #140]	; (8001d00 <HAL_RCC_OscConfig+0x820>)
 8001c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <HAL_RCC_OscConfig+0x820>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4a20      	ldr	r2, [pc, #128]	; (8001d00 <HAL_RCC_OscConfig+0x820>)
 8001c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c84:	f7fe fcba 	bl	80005fc <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe fcb6 	bl	80005fc <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e02c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_RCC_OscConfig+0x820>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x7ac>
 8001caa:	e024      	b.n	8001cf6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d01f      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_RCC_OscConfig+0x820>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <HAL_RCC_OscConfig+0x820>)
 8001cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7fe fc9d 	bl	80005fc <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7fe fc99 	bl	80005fc <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e00f      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_RCC_OscConfig+0x820>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f0      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_RCC_OscConfig+0x820>)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	4905      	ldr	r1, [pc, #20]	; (8001d00 <HAL_RCC_OscConfig+0x820>)
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_RCC_OscConfig+0x824>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
 8001cf0:	e001      	b.n	8001cf6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	feeefffc 	.word	0xfeeefffc

08001d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0e7      	b.n	8001eec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b75      	ldr	r3, [pc, #468]	; (8001ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d910      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b72      	ldr	r3, [pc, #456]	; (8001ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4970      	ldr	r1, [pc, #448]	; (8001ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b6e      	ldr	r3, [pc, #440]	; (8001ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0cf      	b.n	8001eec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d010      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4b66      	ldr	r3, [pc, #408]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d908      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d68:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4960      	ldr	r1, [pc, #384]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d04c      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8e:	4b5a      	ldr	r3, [pc, #360]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d121      	bne.n	8001dde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0a6      	b.n	8001eec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da6:	4b54      	ldr	r3, [pc, #336]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d115      	bne.n	8001dde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e09a      	b.n	8001eec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dbe:	4b4e      	ldr	r3, [pc, #312]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e08e      	b.n	8001eec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dce:	4b4a      	ldr	r3, [pc, #296]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e086      	b.n	8001eec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dde:	4b46      	ldr	r3, [pc, #280]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4943      	ldr	r1, [pc, #268]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df0:	f7fe fc04 	bl	80005fc <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df8:	f7fe fc00 	bl	80005fc <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e06e      	b.n	8001eec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 020c 	and.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1eb      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d208      	bcs.n	8001e4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	492b      	ldr	r1, [pc, #172]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e4e:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d210      	bcs.n	8001e7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 0207 	bic.w	r2, r3, #7
 8001e64:	4923      	ldr	r1, [pc, #140]	; (8001ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e036      	b.n	8001eec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d008      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	4918      	ldr	r1, [pc, #96]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d009      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4910      	ldr	r1, [pc, #64]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ebc:	f000 f824 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	490b      	ldr	r1, [pc, #44]	; (8001efc <HAL_RCC_ClockConfig+0x1f4>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed8:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <HAL_RCC_ClockConfig+0x1f8>)
 8001eda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_ClockConfig+0x1fc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fb3b 	bl	800055c <HAL_InitTick>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001eea:	7afb      	ldrb	r3, [r7, #11]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40022000 	.word	0x40022000
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08002720 	.word	0x08002720
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000004 	.word	0x20000004

08001f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f16:	4b3e      	ldr	r3, [pc, #248]	; (8002010 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f20:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x34>
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b0c      	cmp	r3, #12
 8001f34:	d121      	bne.n	8001f7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d11e      	bne.n	8001f7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f3c:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f48:	4b31      	ldr	r3, [pc, #196]	; (8002010 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e005      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f58:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f64:	4a2b      	ldr	r2, [pc, #172]	; (8002014 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10d      	bne.n	8001f90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d102      	bne.n	8001f86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f80:	4b25      	ldr	r3, [pc, #148]	; (8002018 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e004      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d134      	bne.n	8002000 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d003      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0xa6>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d003      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xac>
 8001fac:	e005      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fb0:	617b      	str	r3, [r7, #20]
      break;
 8001fb2:	e005      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fb6:	617b      	str	r3, [r7, #20]
      break;
 8001fb8:	e002      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	617b      	str	r3, [r7, #20]
      break;
 8001fbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	3301      	adds	r3, #1
 8001fcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	fb03 f202 	mul.w	r2, r3, r2
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	0e5b      	lsrs	r3, r3, #25
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002000:	69bb      	ldr	r3, [r7, #24]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3724      	adds	r7, #36	; 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	08002730 	.word	0x08002730
 8002018:	00f42400 	.word	0x00f42400
 800201c:	007a1200 	.word	0x007a1200

08002020 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002038:	f7ff f9ee 	bl	8001418 <HAL_PWREx_GetVoltageRange>
 800203c:	6178      	str	r0, [r7, #20]
 800203e:	e014      	b.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	4a24      	ldr	r2, [pc, #144]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204a:	6593      	str	r3, [r2, #88]	; 0x58
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002058:	f7ff f9de 	bl	8001418 <HAL_PWREx_GetVoltageRange>
 800205c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002068:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002070:	d10b      	bne.n	800208a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b80      	cmp	r3, #128	; 0x80
 8002076:	d919      	bls.n	80020ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2ba0      	cmp	r3, #160	; 0xa0
 800207c:	d902      	bls.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800207e:	2302      	movs	r3, #2
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	e013      	b.n	80020ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002084:	2301      	movs	r3, #1
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	e010      	b.n	80020ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b80      	cmp	r3, #128	; 0x80
 800208e:	d902      	bls.n	8002096 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002090:	2303      	movs	r3, #3
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	e00a      	b.n	80020ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b80      	cmp	r3, #128	; 0x80
 800209a:	d102      	bne.n	80020a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800209c:	2302      	movs	r3, #2
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	e004      	b.n	80020ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b70      	cmp	r3, #112	; 0x70
 80020a6:	d101      	bne.n	80020ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020a8:	2301      	movs	r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 0207 	bic.w	r2, r3, #7
 80020b4:	4909      	ldr	r1, [pc, #36]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d001      	beq.n	80020ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40022000 	.word	0x40022000

080020e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020e8:	2300      	movs	r3, #0
 80020ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020ec:	2300      	movs	r3, #0
 80020ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d031      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002100:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002104:	d01a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002106:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800210a:	d814      	bhi.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800210c:	2b00      	cmp	r3, #0
 800210e:	d009      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002114:	d10f      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002116:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4a5c      	ldr	r2, [pc, #368]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002122:	e00c      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3304      	adds	r3, #4
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f9ce 	bl	80024cc <RCCEx_PLLSAI1_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002134:	e003      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	74fb      	strb	r3, [r7, #19]
      break;
 800213a:	e000      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800213c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10b      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002144:	4b51      	ldr	r3, [pc, #324]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002152:	494e      	ldr	r1, [pc, #312]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800215a:	e001      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 809e 	beq.w	80022aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002172:	4b46      	ldr	r3, [pc, #280]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00d      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002188:	4b40      	ldr	r3, [pc, #256]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	4a3f      	ldr	r2, [pc, #252]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	6593      	str	r3, [r2, #88]	; 0x58
 8002194:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a4:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a39      	ldr	r2, [pc, #228]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b0:	f7fe fa24 	bl	80005fc <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021b6:	e009      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe fa20 	bl	80005fc <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d902      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	74fb      	strb	r3, [r7, #19]
        break;
 80021ca:	e005      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ef      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d15a      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021de:	4b2b      	ldr	r3, [pc, #172]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01e      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d019      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021fa:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002204:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220c:	4a1f      	ldr	r2, [pc, #124]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800220e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	4a1b      	ldr	r2, [pc, #108]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002226:	4a19      	ldr	r2, [pc, #100]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d016      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe f9e0 	bl	80005fc <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223e:	e00b      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002240:	f7fe f9dc 	bl	80005fc <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d902      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	74fb      	strb	r3, [r7, #19]
            break;
 8002256:	e006      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0ec      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002266:	7cfb      	ldrb	r3, [r7, #19]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227a:	4904      	ldr	r1, [pc, #16]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002282:	e009      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	74bb      	strb	r3, [r7, #18]
 8002288:	e006      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002298:	7c7b      	ldrb	r3, [r7, #17]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4b8a      	ldr	r3, [pc, #552]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	4a89      	ldr	r2, [pc, #548]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b6:	4b84      	ldr	r3, [pc, #528]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f023 0203 	bic.w	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4980      	ldr	r1, [pc, #512]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d8:	4b7b      	ldr	r3, [pc, #492]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f023 020c 	bic.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	4978      	ldr	r1, [pc, #480]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022fa:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	496f      	ldr	r1, [pc, #444]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800231c:	4b6a      	ldr	r3, [pc, #424]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232a:	4967      	ldr	r1, [pc, #412]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800233e:	4b62      	ldr	r3, [pc, #392]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	495e      	ldr	r1, [pc, #376]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	4956      	ldr	r1, [pc, #344]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002382:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	494d      	ldr	r1, [pc, #308]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d028      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023a4:	4b48      	ldr	r3, [pc, #288]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4945      	ldr	r1, [pc, #276]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c2:	d106      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c4:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a3f      	ldr	r2, [pc, #252]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ce:	60d3      	str	r3, [r2, #12]
 80023d0:	e011      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023da:	d10c      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	2101      	movs	r1, #1
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f872 	bl	80024cc <RCCEx_PLLSAI1_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d028      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002402:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002410:	492d      	ldr	r1, [pc, #180]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002420:	d106      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800242c:	60d3      	str	r3, [r2, #12]
 800242e:	e011      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002438:	d10c      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	2101      	movs	r1, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f843 	bl	80024cc <RCCEx_PLLSAI1_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01c      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246e:	4916      	ldr	r1, [pc, #88]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800247e:	d10c      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3304      	adds	r3, #4
 8002484:	2102      	movs	r1, #2
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f820 	bl	80024cc <RCCEx_PLLSAI1_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002496:	7cfb      	ldrb	r3, [r7, #19]
 8002498:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	4904      	ldr	r1, [pc, #16]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000

080024cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024da:	4b74      	ldr	r3, [pc, #464]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d018      	beq.n	8002518 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024e6:	4b71      	ldr	r3, [pc, #452]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f003 0203 	and.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d10d      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
       ||
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024fe:	4b6b      	ldr	r3, [pc, #428]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
       ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d047      	beq.n	80025a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	e044      	b.n	80025a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d018      	beq.n	8002552 <RCCEx_PLLSAI1_Config+0x86>
 8002520:	2b03      	cmp	r3, #3
 8002522:	d825      	bhi.n	8002570 <RCCEx_PLLSAI1_Config+0xa4>
 8002524:	2b01      	cmp	r3, #1
 8002526:	d002      	beq.n	800252e <RCCEx_PLLSAI1_Config+0x62>
 8002528:	2b02      	cmp	r3, #2
 800252a:	d009      	beq.n	8002540 <RCCEx_PLLSAI1_Config+0x74>
 800252c:	e020      	b.n	8002570 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800252e:	4b5f      	ldr	r3, [pc, #380]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11d      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253e:	e01a      	b.n	8002576 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002540:	4b5a      	ldr	r3, [pc, #360]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d116      	bne.n	800257a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002550:	e013      	b.n	800257a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002552:	4b56      	ldr	r3, [pc, #344]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800255e:	4b53      	ldr	r3, [pc, #332]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800256e:	e006      	b.n	800257e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      break;
 8002574:	e004      	b.n	8002580 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002576:	bf00      	nop
 8002578:	e002      	b.n	8002580 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800257a:	bf00      	nop
 800257c:	e000      	b.n	8002580 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800257e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10d      	bne.n	80025a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002586:	4b49      	ldr	r3, [pc, #292]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	430b      	orrs	r3, r1
 800259c:	4943      	ldr	r1, [pc, #268]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d17c      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025a8:	4b40      	ldr	r3, [pc, #256]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a3f      	ldr	r2, [pc, #252]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b4:	f7fe f822 	bl	80005fc <HAL_GetTick>
 80025b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ba:	e009      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025bc:	f7fe f81e 	bl	80005fc <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d902      	bls.n	80025d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	73fb      	strb	r3, [r7, #15]
        break;
 80025ce:	e005      	b.n	80025dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025d0:	4b36      	ldr	r3, [pc, #216]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ef      	bne.n	80025bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d15f      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d110      	bne.n	800260a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80025f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6892      	ldr	r2, [r2, #8]
 80025f8:	0211      	lsls	r1, r2, #8
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	06d2      	lsls	r2, r2, #27
 8002600:	430a      	orrs	r2, r1
 8002602:	492a      	ldr	r1, [pc, #168]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	610b      	str	r3, [r1, #16]
 8002608:	e027      	b.n	800265a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d112      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002610:	4b26      	ldr	r3, [pc, #152]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6892      	ldr	r2, [r2, #8]
 8002620:	0211      	lsls	r1, r2, #8
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6912      	ldr	r2, [r2, #16]
 8002626:	0852      	lsrs	r2, r2, #1
 8002628:	3a01      	subs	r2, #1
 800262a:	0552      	lsls	r2, r2, #21
 800262c:	430a      	orrs	r2, r1
 800262e:	491f      	ldr	r1, [pc, #124]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002630:	4313      	orrs	r3, r2
 8002632:	610b      	str	r3, [r1, #16]
 8002634:	e011      	b.n	800265a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800263e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6892      	ldr	r2, [r2, #8]
 8002646:	0211      	lsls	r1, r2, #8
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6952      	ldr	r2, [r2, #20]
 800264c:	0852      	lsrs	r2, r2, #1
 800264e:	3a01      	subs	r2, #1
 8002650:	0652      	lsls	r2, r2, #25
 8002652:	430a      	orrs	r2, r1
 8002654:	4915      	ldr	r1, [pc, #84]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002656:	4313      	orrs	r3, r2
 8002658:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a13      	ldr	r2, [pc, #76]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002660:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002664:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7fd ffc9 	bl	80005fc <HAL_GetTick>
 800266a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800266c:	e009      	b.n	8002682 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800266e:	f7fd ffc5 	bl	80005fc <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d902      	bls.n	8002682 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	73fb      	strb	r3, [r7, #15]
          break;
 8002680:	e005      	b.n	800268e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0ef      	beq.n	800266e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d106      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	4903      	ldr	r1, [pc, #12]	; (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <memset>:
 80026b0:	4402      	add	r2, r0
 80026b2:	4603      	mov	r3, r0
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d100      	bne.n	80026ba <memset+0xa>
 80026b8:	4770      	bx	lr
 80026ba:	f803 1b01 	strb.w	r1, [r3], #1
 80026be:	e7f9      	b.n	80026b4 <memset+0x4>

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	4d0d      	ldr	r5, [pc, #52]	; (80026f8 <__libc_init_array+0x38>)
 80026c4:	4c0d      	ldr	r4, [pc, #52]	; (80026fc <__libc_init_array+0x3c>)
 80026c6:	1b64      	subs	r4, r4, r5
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	2600      	movs	r6, #0
 80026cc:	42a6      	cmp	r6, r4
 80026ce:	d109      	bne.n	80026e4 <__libc_init_array+0x24>
 80026d0:	4d0b      	ldr	r5, [pc, #44]	; (8002700 <__libc_init_array+0x40>)
 80026d2:	4c0c      	ldr	r4, [pc, #48]	; (8002704 <__libc_init_array+0x44>)
 80026d4:	f000 f818 	bl	8002708 <_init>
 80026d8:	1b64      	subs	r4, r4, r5
 80026da:	10a4      	asrs	r4, r4, #2
 80026dc:	2600      	movs	r6, #0
 80026de:	42a6      	cmp	r6, r4
 80026e0:	d105      	bne.n	80026ee <__libc_init_array+0x2e>
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e8:	4798      	blx	r3
 80026ea:	3601      	adds	r6, #1
 80026ec:	e7ee      	b.n	80026cc <__libc_init_array+0xc>
 80026ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f2:	4798      	blx	r3
 80026f4:	3601      	adds	r6, #1
 80026f6:	e7f2      	b.n	80026de <__libc_init_array+0x1e>
 80026f8:	08002760 	.word	0x08002760
 80026fc:	08002760 	.word	0x08002760
 8002700:	08002760 	.word	0x08002760
 8002704:	08002764 	.word	0x08002764

08002708 <_init>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	bf00      	nop
 800270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270e:	bc08      	pop	{r3}
 8002710:	469e      	mov	lr, r3
 8002712:	4770      	bx	lr

08002714 <_fini>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr
