
PWM_LED_Fade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000228c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002424  08002424  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002424  08002424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800242c  0800242c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800242c  0800242c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000068  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008a56  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000160b  00000000  00000000  00028ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000968  00000000  00000000  0002a0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000743  00000000  00000000  0002aa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fb09  00000000  00000000  0002b18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a343  00000000  00000000  0004ac94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4c33  00000000  00000000  00054fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002728  00000000  00000000  00119c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0011c334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023fc 	.word	0x080023fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080023fc 	.word	0x080023fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c8:	f000 fa1a 	bl	8000900 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004cc:	f000 f818 	bl	8000500 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d0:	f000 f8ee 	bl	80006b0 <MX_GPIO_Init>
	MX_TIM4_Init();
 80004d4:	f000 f872 	bl	80005bc <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80004d8:	210c      	movs	r1, #12
 80004da:	4808      	ldr	r0, [pc, #32]	; (80004fc <main+0x38>)
 80004dc:	f001 f9a4 	bl	8001828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004e0:	2108      	movs	r1, #8
 80004e2:	4806      	ldr	r0, [pc, #24]	; (80004fc <main+0x38>)
 80004e4:	f001 f9a0 	bl	8001828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80004e8:	2104      	movs	r1, #4
 80004ea:	4804      	ldr	r0, [pc, #16]	; (80004fc <main+0x38>)
 80004ec:	f001 f99c 	bl	8001828 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80004f0:	2100      	movs	r1, #0
 80004f2:	4802      	ldr	r0, [pc, #8]	; (80004fc <main+0x38>)
 80004f4:	f001 f998 	bl	8001828 <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80004f8:	e7fe      	b.n	80004f8 <main+0x34>
 80004fa:	bf00      	nop
 80004fc:	20000028 	.word	0x20000028

08000500 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f001 ff48 	bl	80023a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <SystemClock_Config+0xb4>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <SystemClock_Config+0xb4>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <SystemClock_Config+0xb4>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <SystemClock_Config+0xb8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <SystemClock_Config+0xb8>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <SystemClock_Config+0xb8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2310      	movs	r3, #16
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000568:	2300      	movs	r3, #0
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fce5 	bl	8000f40 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x80>
		Error_Handler();
 800057c:	f000 f8c0 	bl	8000700 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f000 ff48 	bl	8001430 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xaa>
		Error_Handler();
 80005a6:	f000 f8ab 	bl	8000700 <Error_Handler>
	}
}
 80005aa:	bf00      	nop
 80005ac:	3750      	adds	r7, #80	; 0x50
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80005de:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <MX_TIM4_Init+0xec>)
 80005e0:	4a32      	ldr	r2, [pc, #200]	; (80006ac <MX_TIM4_Init+0xf0>)
 80005e2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80005e4:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <MX_TIM4_Init+0xec>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ea:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <MX_TIM4_Init+0xec>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 256 - 1;
 80005f0:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <MX_TIM4_Init+0xec>)
 80005f2:	22ff      	movs	r2, #255	; 0xff
 80005f4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <MX_TIM4_Init+0xec>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <MX_TIM4_Init+0xec>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000602:	4829      	ldr	r0, [pc, #164]	; (80006a8 <MX_TIM4_Init+0xec>)
 8000604:	f001 f8c0 	bl	8001788 <HAL_TIM_PWM_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM4_Init+0x56>
		Error_Handler();
 800060e:	f000 f877 	bl	8000700 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4619      	mov	r1, r3
 8000620:	4821      	ldr	r0, [pc, #132]	; (80006a8 <MX_TIM4_Init+0xec>)
 8000622:	f001 fe2f 	bl	8002284 <HAL_TIMEx_MasterConfigSynchronization>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM4_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 800062c:	f000 f868 	bl	8000700 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000630:	2360      	movs	r3, #96	; 0x60
 8000632:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	4818      	ldr	r0, [pc, #96]	; (80006a8 <MX_TIM4_Init+0xec>)
 8000648:	f001 faa6 	bl	8001b98 <HAL_TIM_PWM_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8000652:	f000 f855 	bl	8000700 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2204      	movs	r2, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4812      	ldr	r0, [pc, #72]	; (80006a8 <MX_TIM4_Init+0xec>)
 800065e:	f001 fa9b 	bl	8001b98 <HAL_TIM_PWM_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000668:	f000 f84a 	bl	8000700 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2208      	movs	r2, #8
 8000670:	4619      	mov	r1, r3
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <MX_TIM4_Init+0xec>)
 8000674:	f001 fa90 	bl	8001b98 <HAL_TIM_PWM_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM4_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 800067e:	f000 f83f 	bl	8000700 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	220c      	movs	r2, #12
 8000686:	4619      	mov	r1, r3
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <MX_TIM4_Init+0xec>)
 800068a:	f001 fa85 	bl	8001b98 <HAL_TIM_PWM_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM4_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8000694:	f000 f834 	bl	8000700 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <MX_TIM4_Init+0xec>)
 800069a:	f000 f887 	bl	80007ac <HAL_TIM_MspPostInit>

}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	; 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000028 	.word	0x20000028
 80006ac:	40000800 	.word	0x40000800

080006b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_GPIO_Init+0x4c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <MX_GPIO_Init+0x4c>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_GPIO_Init+0x4c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_GPIO_Init+0x4c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <MX_GPIO_Init+0x4c>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_GPIO_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800

08000700 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000708:	e7fe      	b.n	8000708 <Error_Handler+0x8>
	...

0800070c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <HAL_MspInit+0x4c>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <HAL_MspInit+0x4c>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000720:	6453      	str	r3, [r2, #68]	; 0x44
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <HAL_MspInit+0x4c>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <HAL_MspInit+0x4c>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	4a08      	ldr	r2, [pc, #32]	; (8000758 <HAL_MspInit+0x4c>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073c:	6413      	str	r3, [r2, #64]	; 0x40
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_MspInit+0x4c>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_TIM_PWM_MspInit+0x48>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d115      	bne.n	800079a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <HAL_TIM_PWM_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <HAL_TIM_PWM_MspInit+0x4c>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_TIM_PWM_MspInit+0x4c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	201e      	movs	r0, #30
 8000790:	f000 fa03 	bl	8000b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000794:	201e      	movs	r0, #30
 8000796:	f000 fa1c 	bl	8000bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40000800 	.word	0x40000800
 80007a8:	40023800 	.word	0x40023800

080007ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <HAL_TIM_MspPostInit+0x68>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d11e      	bne.n	800080c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_TIM_MspPostInit+0x6c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <HAL_TIM_MspPostInit+0x6c>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_TIM_MspPostInit+0x6c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007ea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80007fc:	2302      	movs	r3, #2
 80007fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <HAL_TIM_MspPostInit+0x70>)
 8000808:	f000 f9fe 	bl	8000c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40000800 	.word	0x40000800
 8000818:	40023800 	.word	0x40023800
 800081c:	40020c00 	.word	0x40020c00

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 f89a 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <TIM4_IRQHandler+0x10>)
 800087a:	f001 f89d 	bl	80019b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000028 	.word	0x20000028

08000888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008b0:	f7ff ffea 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008b6:	490d      	ldr	r1, [pc, #52]	; (80008ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008cc:	4c0a      	ldr	r4, [pc, #40]	; (80008f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008da:	f001 fd6b 	bl	80023b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008de:	f7ff fdf1 	bl	80004c4 <main>
  bx  lr    
 80008e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008f0:	08002434 	.word	0x08002434
  ldr r2, =_sbss
 80008f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008f8:	20000074 	.word	0x20000074

080008fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC_IRQHandler>
	...

08000900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <HAL_Init+0x40>)
 800090a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800090e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_Init+0x40>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <HAL_Init+0x40>)
 8000916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800091a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_Init+0x40>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <HAL_Init+0x40>)
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000928:	2003      	movs	r0, #3
 800092a:	f000 f92b 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092e:	200f      	movs	r0, #15
 8000930:	f000 f808 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000934:	f7ff feea 	bl	800070c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023c00 	.word	0x40023c00

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_InitTick+0x54>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_InitTick+0x58>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095a:	fbb3 f3f1 	udiv	r3, r3, r1
 800095e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f943 	bl	8000bee <HAL_SYSTICK_Config>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e00e      	b.n	8000990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d80a      	bhi.n	800098e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f000 f90b 	bl	8000b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_InitTick+0x5c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	e000      	b.n	8000990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000004 	.word	0x20000004

080009a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x20>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_IncTick+0x24>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <HAL_IncTick+0x24>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000070 	.word	0x20000070

080009cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_GetTick+0x14>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000070 	.word	0x20000070

080009e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	60d3      	str	r3, [r2, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <__NVIC_GetPriorityGrouping+0x18>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	f003 0307 	and.w	r3, r3, #7
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	db0b      	blt.n	8000a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f003 021f 	and.w	r2, r3, #31
 8000a60:	4907      	ldr	r1, [pc, #28]	; (8000a80 <__NVIC_EnableIRQ+0x38>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	095b      	lsrs	r3, r3, #5
 8000a68:	2001      	movs	r0, #1
 8000a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
         );
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	; 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b50:	d301      	bcc.n	8000b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00f      	b.n	8000b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <SysTick_Config+0x40>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5e:	210f      	movs	r1, #15
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f7ff ff8e 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x40>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff29 	bl	80009e4 <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bac:	f7ff ff3e 	bl	8000a2c <__NVIC_GetPriorityGrouping>
 8000bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff ff8e 	bl	8000ad8 <NVIC_EncodePriority>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff5d 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff31 	bl	8000a48 <__NVIC_EnableIRQ>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ffa2 	bl	8000b40 <SysTick_Config>
 8000bfc:	4603      	mov	r3, r0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	e16b      	b.n	8000efc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c24:	2201      	movs	r2, #1
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	f040 815a 	bne.w	8000ef6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d005      	beq.n	8000c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d130      	bne.n	8000cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c90:	2201      	movs	r2, #1
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	f003 0201 	and.w	r2, r3, #1
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	d017      	beq.n	8000cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d123      	bne.n	8000d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	08da      	lsrs	r2, r3, #3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	691a      	ldr	r2, [r3, #16]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	08da      	lsrs	r2, r3, #3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3208      	adds	r2, #8
 8000d46:	69b9      	ldr	r1, [r7, #24]
 8000d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0203 	and.w	r2, r3, #3
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 80b4 	beq.w	8000ef6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b60      	ldr	r3, [pc, #384]	; (8000f14 <HAL_GPIO_Init+0x30c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a5f      	ldr	r2, [pc, #380]	; (8000f14 <HAL_GPIO_Init+0x30c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b5d      	ldr	r3, [pc, #372]	; (8000f14 <HAL_GPIO_Init+0x30c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000daa:	4a5b      	ldr	r2, [pc, #364]	; (8000f18 <HAL_GPIO_Init+0x310>)
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3302      	adds	r3, #2
 8000db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a52      	ldr	r2, [pc, #328]	; (8000f1c <HAL_GPIO_Init+0x314>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d02b      	beq.n	8000e2e <HAL_GPIO_Init+0x226>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a51      	ldr	r2, [pc, #324]	; (8000f20 <HAL_GPIO_Init+0x318>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d025      	beq.n	8000e2a <HAL_GPIO_Init+0x222>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a50      	ldr	r2, [pc, #320]	; (8000f24 <HAL_GPIO_Init+0x31c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d01f      	beq.n	8000e26 <HAL_GPIO_Init+0x21e>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4f      	ldr	r2, [pc, #316]	; (8000f28 <HAL_GPIO_Init+0x320>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d019      	beq.n	8000e22 <HAL_GPIO_Init+0x21a>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4e      	ldr	r2, [pc, #312]	; (8000f2c <HAL_GPIO_Init+0x324>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d013      	beq.n	8000e1e <HAL_GPIO_Init+0x216>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4d      	ldr	r2, [pc, #308]	; (8000f30 <HAL_GPIO_Init+0x328>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d00d      	beq.n	8000e1a <HAL_GPIO_Init+0x212>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4c      	ldr	r2, [pc, #304]	; (8000f34 <HAL_GPIO_Init+0x32c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d007      	beq.n	8000e16 <HAL_GPIO_Init+0x20e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4b      	ldr	r2, [pc, #300]	; (8000f38 <HAL_GPIO_Init+0x330>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_GPIO_Init+0x20a>
 8000e0e:	2307      	movs	r3, #7
 8000e10:	e00e      	b.n	8000e30 <HAL_GPIO_Init+0x228>
 8000e12:	2308      	movs	r3, #8
 8000e14:	e00c      	b.n	8000e30 <HAL_GPIO_Init+0x228>
 8000e16:	2306      	movs	r3, #6
 8000e18:	e00a      	b.n	8000e30 <HAL_GPIO_Init+0x228>
 8000e1a:	2305      	movs	r3, #5
 8000e1c:	e008      	b.n	8000e30 <HAL_GPIO_Init+0x228>
 8000e1e:	2304      	movs	r3, #4
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x228>
 8000e22:	2303      	movs	r3, #3
 8000e24:	e004      	b.n	8000e30 <HAL_GPIO_Init+0x228>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_Init+0x228>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <HAL_GPIO_Init+0x228>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	69fa      	ldr	r2, [r7, #28]
 8000e32:	f002 0203 	and.w	r2, r2, #3
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	4093      	lsls	r3, r2
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e40:	4935      	ldr	r1, [pc, #212]	; (8000f18 <HAL_GPIO_Init+0x310>)
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	3302      	adds	r3, #2
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <HAL_GPIO_Init+0x334>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e72:	4a32      	ldr	r2, [pc, #200]	; (8000f3c <HAL_GPIO_Init+0x334>)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e78:	4b30      	ldr	r3, [pc, #192]	; (8000f3c <HAL_GPIO_Init+0x334>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e9c:	4a27      	ldr	r2, [pc, #156]	; (8000f3c <HAL_GPIO_Init+0x334>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <HAL_GPIO_Init+0x334>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ec6:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_GPIO_Init+0x334>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_GPIO_Init+0x334>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef0:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <HAL_GPIO_Init+0x334>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	61fb      	str	r3, [r7, #28]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	2b0f      	cmp	r3, #15
 8000f00:	f67f ae90 	bls.w	8000c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40013800 	.word	0x40013800
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	40020400 	.word	0x40020400
 8000f24:	40020800 	.word	0x40020800
 8000f28:	40020c00 	.word	0x40020c00
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40021400 	.word	0x40021400
 8000f34:	40021800 	.word	0x40021800
 8000f38:	40021c00 	.word	0x40021c00
 8000f3c:	40013c00 	.word	0x40013c00

08000f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e267      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d075      	beq.n	800104a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f5e:	4b88      	ldr	r3, [pc, #544]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 030c 	and.w	r3, r3, #12
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d00c      	beq.n	8000f84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f6a:	4b85      	ldr	r3, [pc, #532]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d112      	bne.n	8000f9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f76:	4b82      	ldr	r3, [pc, #520]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f82:	d10b      	bne.n	8000f9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	4b7e      	ldr	r3, [pc, #504]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d05b      	beq.n	8001048 <HAL_RCC_OscConfig+0x108>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d157      	bne.n	8001048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e242      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa4:	d106      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x74>
 8000fa6:	4b76      	ldr	r3, [pc, #472]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a75      	ldr	r2, [pc, #468]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e01d      	b.n	8000ff0 <HAL_RCC_OscConfig+0xb0>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fbc:	d10c      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x98>
 8000fbe:	4b70      	ldr	r3, [pc, #448]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a6f      	ldr	r2, [pc, #444]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	4b6d      	ldr	r3, [pc, #436]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a6c      	ldr	r2, [pc, #432]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e00b      	b.n	8000ff0 <HAL_RCC_OscConfig+0xb0>
 8000fd8:	4b69      	ldr	r3, [pc, #420]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a68      	ldr	r2, [pc, #416]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b66      	ldr	r3, [pc, #408]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a65      	ldr	r2, [pc, #404]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8000fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d013      	beq.n	8001020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fce8 	bl	80009cc <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fce4 	bl	80009cc <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e207      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	4b5b      	ldr	r3, [pc, #364]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0xc0>
 800101e:	e014      	b.n	800104a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fcd4 	bl	80009cc <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fcd0 	bl	80009cc <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	; 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e1f3      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	4b51      	ldr	r3, [pc, #324]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f0      	bne.n	8001028 <HAL_RCC_OscConfig+0xe8>
 8001046:	e000      	b.n	800104a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d063      	beq.n	800111e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001056:	4b4a      	ldr	r3, [pc, #296]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001062:	4b47      	ldr	r3, [pc, #284]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800106a:	2b08      	cmp	r3, #8
 800106c:	d11c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800106e:	4b44      	ldr	r3, [pc, #272]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d116      	bne.n	80010a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107a:	4b41      	ldr	r3, [pc, #260]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d005      	beq.n	8001092 <HAL_RCC_OscConfig+0x152>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d001      	beq.n	8001092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e1c7      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001092:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4937      	ldr	r1, [pc, #220]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	e03a      	b.n	800111e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d020      	beq.n	80010f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b0:	4b34      	ldr	r3, [pc, #208]	; (8001184 <HAL_RCC_OscConfig+0x244>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b6:	f7ff fc89 	bl	80009cc <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010be:	f7ff fc85 	bl	80009cc <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e1a8      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010dc:	4b28      	ldr	r3, [pc, #160]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4925      	ldr	r1, [pc, #148]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]
 80010f0:	e015      	b.n	800111e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_RCC_OscConfig+0x244>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fc68 	bl	80009cc <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001100:	f7ff fc64 	bl	80009cc <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e187      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d036      	beq.n	8001198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d016      	beq.n	8001160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_RCC_OscConfig+0x248>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001138:	f7ff fc48 	bl	80009cc <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001140:	f7ff fc44 	bl	80009cc <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e167      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_RCC_OscConfig+0x240>)
 8001154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0x200>
 800115e:	e01b      	b.n	8001198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_RCC_OscConfig+0x248>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001166:	f7ff fc31 	bl	80009cc <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116c:	e00e      	b.n	800118c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800116e:	f7ff fc2d 	bl	80009cc <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d907      	bls.n	800118c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e150      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
 8001180:	40023800 	.word	0x40023800
 8001184:	42470000 	.word	0x42470000
 8001188:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	4b88      	ldr	r3, [pc, #544]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 800118e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1ea      	bne.n	800116e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8097 	beq.w	80012d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011aa:	4b81      	ldr	r3, [pc, #516]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10f      	bne.n	80011d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b7d      	ldr	r3, [pc, #500]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a7c      	ldr	r2, [pc, #496]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b7a      	ldr	r3, [pc, #488]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d2:	2301      	movs	r3, #1
 80011d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d6:	4b77      	ldr	r3, [pc, #476]	; (80013b4 <HAL_RCC_OscConfig+0x474>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d118      	bne.n	8001214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e2:	4b74      	ldr	r3, [pc, #464]	; (80013b4 <HAL_RCC_OscConfig+0x474>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a73      	ldr	r2, [pc, #460]	; (80013b4 <HAL_RCC_OscConfig+0x474>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fbed 	bl	80009cc <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f6:	f7ff fbe9 	bl	80009cc <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e10c      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <HAL_RCC_OscConfig+0x474>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d106      	bne.n	800122a <HAL_RCC_OscConfig+0x2ea>
 800121c:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 800121e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001220:	4a63      	ldr	r2, [pc, #396]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6713      	str	r3, [r2, #112]	; 0x70
 8001228:	e01c      	b.n	8001264 <HAL_RCC_OscConfig+0x324>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b05      	cmp	r3, #5
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0x30c>
 8001232:	4b5f      	ldr	r3, [pc, #380]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001236:	4a5e      	ldr	r2, [pc, #376]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6713      	str	r3, [r2, #112]	; 0x70
 800123e:	4b5c      	ldr	r3, [pc, #368]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001242:	4a5b      	ldr	r2, [pc, #364]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6713      	str	r3, [r2, #112]	; 0x70
 800124a:	e00b      	b.n	8001264 <HAL_RCC_OscConfig+0x324>
 800124c:	4b58      	ldr	r3, [pc, #352]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 800124e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001250:	4a57      	ldr	r2, [pc, #348]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001252:	f023 0301 	bic.w	r3, r3, #1
 8001256:	6713      	str	r3, [r2, #112]	; 0x70
 8001258:	4b55      	ldr	r3, [pc, #340]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 800125a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125c:	4a54      	ldr	r2, [pc, #336]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 800125e:	f023 0304 	bic.w	r3, r3, #4
 8001262:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d015      	beq.n	8001298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126c:	f7ff fbae 	bl	80009cc <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001272:	e00a      	b.n	800128a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001274:	f7ff fbaa 	bl	80009cc <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001282:	4293      	cmp	r3, r2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e0cb      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128a:	4b49      	ldr	r3, [pc, #292]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 800128c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0ee      	beq.n	8001274 <HAL_RCC_OscConfig+0x334>
 8001296:	e014      	b.n	80012c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001298:	f7ff fb98 	bl	80009cc <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129e:	e00a      	b.n	80012b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a0:	f7ff fb94 	bl	80009cc <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e0b5      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b6:	4b3e      	ldr	r3, [pc, #248]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 80012b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ee      	bne.n	80012a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d105      	bne.n	80012d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c8:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a38      	ldr	r2, [pc, #224]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 80012ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80a1 	beq.w	8001420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012de:	4b34      	ldr	r3, [pc, #208]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d05c      	beq.n	80013a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d141      	bne.n	8001376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <HAL_RCC_OscConfig+0x478>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fb68 	bl	80009cc <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001300:	f7ff fb64 	bl	80009cc <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e087      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69da      	ldr	r2, [r3, #28]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	019b      	lsls	r3, r3, #6
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	085b      	lsrs	r3, r3, #1
 8001336:	3b01      	subs	r3, #1
 8001338:	041b      	lsls	r3, r3, #16
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	061b      	lsls	r3, r3, #24
 8001342:	491b      	ldr	r1, [pc, #108]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_RCC_OscConfig+0x478>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fb3d 	bl	80009cc <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff fb39 	bl	80009cc <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e05c      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x416>
 8001374:	e054      	b.n	8001420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_RCC_OscConfig+0x478>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fb26 	bl	80009cc <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff fb22 	bl	80009cc <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e045      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_RCC_OscConfig+0x470>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x444>
 80013a2:	e03d      	b.n	8001420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d107      	bne.n	80013bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e038      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000
 80013b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_RCC_OscConfig+0x4ec>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d028      	beq.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d121      	bne.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d11a      	bne.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013ec:	4013      	ands	r3, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d111      	bne.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	3b01      	subs	r3, #1
 8001406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001408:	429a      	cmp	r2, r3
 800140a:	d107      	bne.n	800141c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0cc      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001444:	4b68      	ldr	r3, [pc, #416]	; (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d90c      	bls.n	800146c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001452:	4b65      	ldr	r3, [pc, #404]	; (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800145a:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0b8      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d020      	beq.n	80014ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001484:	4b59      	ldr	r3, [pc, #356]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4a58      	ldr	r2, [pc, #352]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800148e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800149c:	4b53      	ldr	r3, [pc, #332]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4a52      	ldr	r2, [pc, #328]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a8:	4b50      	ldr	r3, [pc, #320]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	494d      	ldr	r1, [pc, #308]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d044      	beq.n	8001550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b47      	ldr	r3, [pc, #284]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d119      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e07f      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d003      	beq.n	80014ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ee:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e06f      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e067      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150e:	4b37      	ldr	r3, [pc, #220]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f023 0203 	bic.w	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4934      	ldr	r1, [pc, #208]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	4313      	orrs	r3, r2
 800151e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001520:	f7ff fa54 	bl	80009cc <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001526:	e00a      	b.n	800153e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001528:	f7ff fa50 	bl	80009cc <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	; 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e04f      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 020c 	and.w	r2, r3, #12
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	429a      	cmp	r2, r3
 800154e:	d1eb      	bne.n	8001528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d20c      	bcs.n	8001578 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e032      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4916      	ldr	r1, [pc, #88]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015b6:	f000 f821 	bl	80015fc <HAL_RCC_GetSysClockFreq>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	490a      	ldr	r1, [pc, #40]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	5ccb      	ldrb	r3, [r1, r3]
 80015ca:	fa22 f303 	lsr.w	r3, r2, r3
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_RCC_ClockConfig+0x1c8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f9b4 	bl	8000944 <HAL_InitTick>

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00
 80015ec:	40023800 	.word	0x40023800
 80015f0:	08002414 	.word	0x08002414
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001600:	b090      	sub	sp, #64	; 0x40
 8001602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
 8001608:	2300      	movs	r3, #0
 800160a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800160c:	2300      	movs	r3, #0
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b08      	cmp	r3, #8
 800161e:	d00d      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0x40>
 8001620:	2b08      	cmp	r3, #8
 8001622:	f200 80a1 	bhi.w	8001768 <HAL_RCC_GetSysClockFreq+0x16c>
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x34>
 800162a:	2b04      	cmp	r3, #4
 800162c:	d003      	beq.n	8001636 <HAL_RCC_GetSysClockFreq+0x3a>
 800162e:	e09b      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_RCC_GetSysClockFreq+0x184>)
 8001632:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001634:	e09b      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001636:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_RCC_GetSysClockFreq+0x188>)
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800163a:	e098      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800163c:	4b4f      	ldr	r3, [pc, #316]	; (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001646:	4b4d      	ldr	r3, [pc, #308]	; (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d028      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001652:	4b4a      	ldr	r3, [pc, #296]	; (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	099b      	lsrs	r3, r3, #6
 8001658:	2200      	movs	r2, #0
 800165a:	623b      	str	r3, [r7, #32]
 800165c:	627a      	str	r2, [r7, #36]	; 0x24
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001664:	2100      	movs	r1, #0
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <HAL_RCC_GetSysClockFreq+0x188>)
 8001668:	fb03 f201 	mul.w	r2, r3, r1
 800166c:	2300      	movs	r3, #0
 800166e:	fb00 f303 	mul.w	r3, r0, r3
 8001672:	4413      	add	r3, r2
 8001674:	4a43      	ldr	r2, [pc, #268]	; (8001784 <HAL_RCC_GetSysClockFreq+0x188>)
 8001676:	fba0 1202 	umull	r1, r2, r0, r2
 800167a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800167c:	460a      	mov	r2, r1
 800167e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001682:	4413      	add	r3, r2
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001688:	2200      	movs	r2, #0
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	61fa      	str	r2, [r7, #28]
 800168e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001692:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001696:	f7fe fd97 	bl	80001c8 <__aeabi_uldivmod>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4613      	mov	r3, r2
 80016a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a2:	e053      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	2200      	movs	r2, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	617a      	str	r2, [r7, #20]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016b6:	f04f 0b00 	mov.w	fp, #0
 80016ba:	4652      	mov	r2, sl
 80016bc:	465b      	mov	r3, fp
 80016be:	f04f 0000 	mov.w	r0, #0
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	0159      	lsls	r1, r3, #5
 80016c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016cc:	0150      	lsls	r0, r2, #5
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	ebb2 080a 	subs.w	r8, r2, sl
 80016d6:	eb63 090b 	sbc.w	r9, r3, fp
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016ee:	ebb2 0408 	subs.w	r4, r2, r8
 80016f2:	eb63 0509 	sbc.w	r5, r3, r9
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	00eb      	lsls	r3, r5, #3
 8001700:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001704:	00e2      	lsls	r2, r4, #3
 8001706:	4614      	mov	r4, r2
 8001708:	461d      	mov	r5, r3
 800170a:	eb14 030a 	adds.w	r3, r4, sl
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	eb45 030b 	adc.w	r3, r5, fp
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001722:	4629      	mov	r1, r5
 8001724:	028b      	lsls	r3, r1, #10
 8001726:	4621      	mov	r1, r4
 8001728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800172c:	4621      	mov	r1, r4
 800172e:	028a      	lsls	r2, r1, #10
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001736:	2200      	movs	r2, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	60fa      	str	r2, [r7, #12]
 800173c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001740:	f7fe fd42 	bl	80001c8 <__aeabi_uldivmod>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4613      	mov	r3, r2
 800174a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_GetSysClockFreq+0x180>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	3301      	adds	r3, #1
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800175c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800175e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001766:	e002      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_RCC_GetSysClockFreq+0x184>)
 800176a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800176c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800176e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001770:	4618      	mov	r0, r3
 8001772:	3740      	adds	r7, #64	; 0x40
 8001774:	46bd      	mov	sp, r7
 8001776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	00f42400 	.word	0x00f42400
 8001784:	017d7840 	.word	0x017d7840

08001788 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e041      	b.n	800181e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7fe ffd4 	bl	800075c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3304      	adds	r3, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4610      	mov	r0, r2
 80017c8:	f000 fada 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_TIM_PWM_Start+0x24>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b01      	cmp	r3, #1
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	e022      	b.n	8001892 <HAL_TIM_PWM_Start+0x6a>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2b04      	cmp	r3, #4
 8001850:	d109      	bne.n	8001866 <HAL_TIM_PWM_Start+0x3e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b01      	cmp	r3, #1
 800185c:	bf14      	ite	ne
 800185e:	2301      	movne	r3, #1
 8001860:	2300      	moveq	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	e015      	b.n	8001892 <HAL_TIM_PWM_Start+0x6a>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b08      	cmp	r3, #8
 800186a:	d109      	bne.n	8001880 <HAL_TIM_PWM_Start+0x58>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	e008      	b.n	8001892 <HAL_TIM_PWM_Start+0x6a>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b01      	cmp	r3, #1
 800188a:	bf14      	ite	ne
 800188c:	2301      	movne	r3, #1
 800188e:	2300      	moveq	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e07c      	b.n	8001994 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d104      	bne.n	80018aa <HAL_TIM_PWM_Start+0x82>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2202      	movs	r2, #2
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018a8:	e013      	b.n	80018d2 <HAL_TIM_PWM_Start+0xaa>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d104      	bne.n	80018ba <HAL_TIM_PWM_Start+0x92>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018b8:	e00b      	b.n	80018d2 <HAL_TIM_PWM_Start+0xaa>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d104      	bne.n	80018ca <HAL_TIM_PWM_Start+0xa2>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018c8:	e003      	b.n	80018d2 <HAL_TIM_PWM_Start+0xaa>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2202      	movs	r2, #2
 80018ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2201      	movs	r2, #1
 80018d8:	6839      	ldr	r1, [r7, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fcac 	bl	8002238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a2d      	ldr	r2, [pc, #180]	; (800199c <HAL_TIM_PWM_Start+0x174>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d004      	beq.n	80018f4 <HAL_TIM_PWM_Start+0xcc>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a2c      	ldr	r2, [pc, #176]	; (80019a0 <HAL_TIM_PWM_Start+0x178>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_TIM_PWM_Start+0xd0>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_TIM_PWM_Start+0xd2>
 80018f8:	2300      	movs	r3, #0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800190c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_TIM_PWM_Start+0x174>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d022      	beq.n	800195e <HAL_TIM_PWM_Start+0x136>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001920:	d01d      	beq.n	800195e <HAL_TIM_PWM_Start+0x136>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <HAL_TIM_PWM_Start+0x17c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d018      	beq.n	800195e <HAL_TIM_PWM_Start+0x136>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_TIM_PWM_Start+0x180>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_TIM_PWM_Start+0x136>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_TIM_PWM_Start+0x184>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00e      	beq.n	800195e <HAL_TIM_PWM_Start+0x136>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a16      	ldr	r2, [pc, #88]	; (80019a0 <HAL_TIM_PWM_Start+0x178>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d009      	beq.n	800195e <HAL_TIM_PWM_Start+0x136>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <HAL_TIM_PWM_Start+0x188>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d004      	beq.n	800195e <HAL_TIM_PWM_Start+0x136>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <HAL_TIM_PWM_Start+0x18c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d111      	bne.n	8001982 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b06      	cmp	r3, #6
 800196e:	d010      	beq.n	8001992 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001980:	e007      	b.n	8001992 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40010000 	.word	0x40010000
 80019a0:	40010400 	.word	0x40010400
 80019a4:	40000400 	.word	0x40000400
 80019a8:	40000800 	.word	0x40000800
 80019ac:	40000c00 	.word	0x40000c00
 80019b0:	40014000 	.word	0x40014000
 80019b4:	40001800 	.word	0x40001800

080019b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d020      	beq.n	8001a1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01b      	beq.n	8001a1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0202 	mvn.w	r2, #2
 80019ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f99e 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001a08:	e005      	b.n	8001a16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f990 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f9a1 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d020      	beq.n	8001a68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01b      	beq.n	8001a68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0204 	mvn.w	r2, #4
 8001a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f978 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001a54:	e005      	b.n	8001a62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f96a 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f97b 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d020      	beq.n	8001ab4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01b      	beq.n	8001ab4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f06f 0208 	mvn.w	r2, #8
 8001a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f952 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001aa0:	e005      	b.n	8001aae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f944 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f955 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d020      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01b      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0210 	mvn.w	r2, #16
 8001ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f92c 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001aec:	e005      	b.n	8001afa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f91e 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f92f 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00c      	beq.n	8001b24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d007      	beq.n	8001b24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0201 	mvn.w	r2, #1
 8001b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8fc 	bl	8001d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00c      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fc24 	bl	8002390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00c      	beq.n	8001b6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f900 	bl	8001d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00c      	beq.n	8001b90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f06f 0220 	mvn.w	r2, #32
 8001b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fbf6 	bl	800237c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e0ae      	b.n	8001d14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b0c      	cmp	r3, #12
 8001bc2:	f200 809f 	bhi.w	8001d04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001bc6:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bcc:	08001c01 	.word	0x08001c01
 8001bd0:	08001d05 	.word	0x08001d05
 8001bd4:	08001d05 	.word	0x08001d05
 8001bd8:	08001d05 	.word	0x08001d05
 8001bdc:	08001c41 	.word	0x08001c41
 8001be0:	08001d05 	.word	0x08001d05
 8001be4:	08001d05 	.word	0x08001d05
 8001be8:	08001d05 	.word	0x08001d05
 8001bec:	08001c83 	.word	0x08001c83
 8001bf0:	08001d05 	.word	0x08001d05
 8001bf4:	08001d05 	.word	0x08001d05
 8001bf8:	08001d05 	.word	0x08001d05
 8001bfc:	08001cc3 	.word	0x08001cc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f966 	bl	8001ed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0208 	orr.w	r2, r2, #8
 8001c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0204 	bic.w	r2, r2, #4
 8001c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6999      	ldr	r1, [r3, #24]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	619a      	str	r2, [r3, #24]
      break;
 8001c3e:	e064      	b.n	8001d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f9b6 	bl	8001fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699a      	ldr	r2, [r3, #24]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6999      	ldr	r1, [r3, #24]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	021a      	lsls	r2, r3, #8
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	619a      	str	r2, [r3, #24]
      break;
 8001c80:	e043      	b.n	8001d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 fa0b 	bl	80020a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69da      	ldr	r2, [r3, #28]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0208 	orr.w	r2, r2, #8
 8001c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69da      	ldr	r2, [r3, #28]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0204 	bic.w	r2, r2, #4
 8001cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69d9      	ldr	r1, [r3, #28]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	61da      	str	r2, [r3, #28]
      break;
 8001cc0:	e023      	b.n	8001d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 fa5f 	bl	800218c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	69d9      	ldr	r1, [r3, #28]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	021a      	lsls	r2, r3, #8
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	61da      	str	r2, [r3, #28]
      break;
 8001d02:	e002      	b.n	8001d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	75fb      	strb	r3, [r7, #23]
      break;
 8001d08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a46      	ldr	r2, [pc, #280]	; (8001eac <TIM_Base_SetConfig+0x12c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9e:	d00f      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a43      	ldr	r2, [pc, #268]	; (8001eb0 <TIM_Base_SetConfig+0x130>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00b      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a42      	ldr	r2, [pc, #264]	; (8001eb4 <TIM_Base_SetConfig+0x134>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d007      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a41      	ldr	r2, [pc, #260]	; (8001eb8 <TIM_Base_SetConfig+0x138>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d003      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <TIM_Base_SetConfig+0x13c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d108      	bne.n	8001dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a35      	ldr	r2, [pc, #212]	; (8001eac <TIM_Base_SetConfig+0x12c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02b      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de0:	d027      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <TIM_Base_SetConfig+0x130>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d023      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a31      	ldr	r2, [pc, #196]	; (8001eb4 <TIM_Base_SetConfig+0x134>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01f      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a30      	ldr	r2, [pc, #192]	; (8001eb8 <TIM_Base_SetConfig+0x138>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01b      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a2f      	ldr	r2, [pc, #188]	; (8001ebc <TIM_Base_SetConfig+0x13c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d017      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <TIM_Base_SetConfig+0x140>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a2d      	ldr	r2, [pc, #180]	; (8001ec4 <TIM_Base_SetConfig+0x144>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00f      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a2c      	ldr	r2, [pc, #176]	; (8001ec8 <TIM_Base_SetConfig+0x148>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00b      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ecc <TIM_Base_SetConfig+0x14c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2a      	ldr	r2, [pc, #168]	; (8001ed0 <TIM_Base_SetConfig+0x150>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d003      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a29      	ldr	r2, [pc, #164]	; (8001ed4 <TIM_Base_SetConfig+0x154>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d108      	bne.n	8001e44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <TIM_Base_SetConfig+0x12c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d003      	beq.n	8001e78 <TIM_Base_SetConfig+0xf8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <TIM_Base_SetConfig+0x13c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d103      	bne.n	8001e80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f023 0201 	bic.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40000800 	.word	0x40000800
 8001eb8:	40000c00 	.word	0x40000c00
 8001ebc:	40010400 	.word	0x40010400
 8001ec0:	40014000 	.word	0x40014000
 8001ec4:	40014400 	.word	0x40014400
 8001ec8:	40014800 	.word	0x40014800
 8001ecc:	40001800 	.word	0x40001800
 8001ed0:	40001c00 	.word	0x40001c00
 8001ed4:	40002000 	.word	0x40002000

08001ed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f023 0201 	bic.w	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0303 	bic.w	r3, r3, #3
 8001f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f023 0302 	bic.w	r3, r3, #2
 8001f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a20      	ldr	r2, [pc, #128]	; (8001fb0 <TIM_OC1_SetConfig+0xd8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d003      	beq.n	8001f3c <TIM_OC1_SetConfig+0x64>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <TIM_OC1_SetConfig+0xdc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d10c      	bne.n	8001f56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f023 0308 	bic.w	r3, r3, #8
 8001f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a15      	ldr	r2, [pc, #84]	; (8001fb0 <TIM_OC1_SetConfig+0xd8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <TIM_OC1_SetConfig+0x8e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <TIM_OC1_SetConfig+0xdc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d111      	bne.n	8001f8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	621a      	str	r2, [r3, #32]
}
 8001fa4:	bf00      	nop
 8001fa6:	371c      	adds	r7, #28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f023 0210 	bic.w	r2, r3, #16
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f023 0320 	bic.w	r3, r3, #32
 8002002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a22      	ldr	r2, [pc, #136]	; (800209c <TIM_OC2_SetConfig+0xe4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <TIM_OC2_SetConfig+0x68>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <TIM_OC2_SetConfig+0xe8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d10d      	bne.n	800203c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800203a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <TIM_OC2_SetConfig+0xe4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d003      	beq.n	800204c <TIM_OC2_SetConfig+0x94>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <TIM_OC2_SetConfig+0xe8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d113      	bne.n	8002074 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800205a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	621a      	str	r2, [r3, #32]
}
 800208e:	bf00      	nop
 8002090:	371c      	adds	r7, #28
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000
 80020a0:	40010400 	.word	0x40010400

080020a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0303 	bic.w	r3, r3, #3
 80020da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a21      	ldr	r2, [pc, #132]	; (8002184 <TIM_OC3_SetConfig+0xe0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d003      	beq.n	800210a <TIM_OC3_SetConfig+0x66>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a20      	ldr	r2, [pc, #128]	; (8002188 <TIM_OC3_SetConfig+0xe4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10d      	bne.n	8002126 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	4313      	orrs	r3, r2
 800211c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a16      	ldr	r2, [pc, #88]	; (8002184 <TIM_OC3_SetConfig+0xe0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d003      	beq.n	8002136 <TIM_OC3_SetConfig+0x92>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a15      	ldr	r2, [pc, #84]	; (8002188 <TIM_OC3_SetConfig+0xe4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d113      	bne.n	800215e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800213c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	621a      	str	r2, [r3, #32]
}
 8002178:	bf00      	nop
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40010000 	.word	0x40010000
 8002188:	40010400 	.word	0x40010400

0800218c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	031b      	lsls	r3, r3, #12
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <TIM_OC4_SetConfig+0xa4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <TIM_OC4_SetConfig+0x68>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <TIM_OC4_SetConfig+0xa8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d109      	bne.n	8002208 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	621a      	str	r2, [r3, #32]
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40010000 	.word	0x40010000
 8002234:	40010400 	.word	0x40010400

08002238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	2201      	movs	r2, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	431a      	orrs	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	621a      	str	r2, [r3, #32]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002298:	2302      	movs	r3, #2
 800229a:	e05a      	b.n	8002352 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d022      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e8:	d01d      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d018      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a1a      	ldr	r2, [pc, #104]	; (800236c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00e      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a18      	ldr	r2, [pc, #96]	; (8002370 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d009      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a17      	ldr	r2, [pc, #92]	; (8002374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d004      	beq.n	8002326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a15      	ldr	r2, [pc, #84]	; (8002378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d10c      	bne.n	8002340 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800232c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	4313      	orrs	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40010000 	.word	0x40010000
 8002364:	40000400 	.word	0x40000400
 8002368:	40000800 	.word	0x40000800
 800236c:	40000c00 	.word	0x40000c00
 8002370:	40010400 	.word	0x40010400
 8002374:	40014000 	.word	0x40014000
 8002378:	40001800 	.word	0x40001800

0800237c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <memset>:
 80023a4:	4402      	add	r2, r0
 80023a6:	4603      	mov	r3, r0
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d100      	bne.n	80023ae <memset+0xa>
 80023ac:	4770      	bx	lr
 80023ae:	f803 1b01 	strb.w	r1, [r3], #1
 80023b2:	e7f9      	b.n	80023a8 <memset+0x4>

080023b4 <__libc_init_array>:
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	4d0d      	ldr	r5, [pc, #52]	; (80023ec <__libc_init_array+0x38>)
 80023b8:	4c0d      	ldr	r4, [pc, #52]	; (80023f0 <__libc_init_array+0x3c>)
 80023ba:	1b64      	subs	r4, r4, r5
 80023bc:	10a4      	asrs	r4, r4, #2
 80023be:	2600      	movs	r6, #0
 80023c0:	42a6      	cmp	r6, r4
 80023c2:	d109      	bne.n	80023d8 <__libc_init_array+0x24>
 80023c4:	4d0b      	ldr	r5, [pc, #44]	; (80023f4 <__libc_init_array+0x40>)
 80023c6:	4c0c      	ldr	r4, [pc, #48]	; (80023f8 <__libc_init_array+0x44>)
 80023c8:	f000 f818 	bl	80023fc <_init>
 80023cc:	1b64      	subs	r4, r4, r5
 80023ce:	10a4      	asrs	r4, r4, #2
 80023d0:	2600      	movs	r6, #0
 80023d2:	42a6      	cmp	r6, r4
 80023d4:	d105      	bne.n	80023e2 <__libc_init_array+0x2e>
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023dc:	4798      	blx	r3
 80023de:	3601      	adds	r6, #1
 80023e0:	e7ee      	b.n	80023c0 <__libc_init_array+0xc>
 80023e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e6:	4798      	blx	r3
 80023e8:	3601      	adds	r6, #1
 80023ea:	e7f2      	b.n	80023d2 <__libc_init_array+0x1e>
 80023ec:	0800242c 	.word	0x0800242c
 80023f0:	0800242c 	.word	0x0800242c
 80023f4:	0800242c 	.word	0x0800242c
 80023f8:	08002430 	.word	0x08002430

080023fc <_init>:
 80023fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fe:	bf00      	nop
 8002400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002402:	bc08      	pop	{r3}
 8002404:	469e      	mov	lr, r3
 8002406:	4770      	bx	lr

08002408 <_fini>:
 8002408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240a:	bf00      	nop
 800240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240e:	bc08      	pop	{r3}
 8002410:	469e      	mov	lr, r3
 8002412:	4770      	bx	lr
